{"version":3,"sources":["serviceWorker.js","redux/message-reducer.js","redux/redux-store.js","Components/Messages/Message.jsx","Components/Messages/Messages.jsx","Components/Messages/MessagesContainer.jsx","Components/AddForm/AddForm.jsx","Components/AddForm/AddFormContainer.jsx","App.js","index.js"],"names":["Boolean","window","location","hostname","match","initialState","newNameText","newEmailText","newMessageText","messageData","id","name","email","message","messageReducer","state","action","type","newText","reducers","combineReducers","messagePage","store","createStore","Message","props","className","style","maxWidth","Messages","MessageElements","messages","map","el","key","MessagesContainer","connect","newFieldsText","dispatch","AddForm","onMessageChange","e","text","target","value","updateNewMessageText","noValidate","htmlFor","onChange","required","onClick","addMessage","AddFormContainer","updateNewMessageTextActionCreator","App","db","firebase","console","log","Component","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.d05dac6c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const ADD_MESSAGE = 'ADD-MESSAGE';\r\nconst UPDATE_NEW_MESSAGE_TEXT = 'UPDATE-NEW-MESSAGE-TEXT';\r\n\r\nlet initialState = {\r\n    newNameText: \"\",\r\n    newEmailText: \"\",\r\n    newMessageText: \"\",\r\n    messageData: [\r\n        {\r\n            id: 1,\r\n            name: \"Вася\",\r\n            email: \"vasya@mail.ru\",\r\n            message: \"Сообщение от Василия Пупкина.\",\r\n        },\r\n        {\r\n            id: 2,\r\n            name: \"Маруся\",\r\n            email: \"marusya@mail.ru\",\r\n            message: \"Всем привет, я Маруся\",\r\n        },\r\n        {\r\n            id: 3,\r\n            name: \"Вася\",\r\n            email: \"vasya@mail.ru\",\r\n            message: \"Сообщение от Василия Пупкина.\",\r\n        },\r\n        {\r\n            id: 4,\r\n            name: \"Маруся\",\r\n            email: \"marusya@mail.ru\",\r\n            message: \"Всем привет, я Маруся\",\r\n        },\r\n        {\r\n            id: 5,\r\n            name: \"Вася\",\r\n            email: \"vasya@mail.ru\",\r\n            message: \"Сообщение от Василия Пупкина.\",\r\n        }]\r\n}\r\n\r\nconst messageReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_MESSAGE: {\r\n            return{\r\n                ...state,\r\n                newNameText: \"\",\r\n                newEmailText: \"\",\r\n                newMessageText: \"\",\r\n                messageData: [...state.messageData, {id: 6, name: state.newNameText, email: state.newEmailText, message: state.newMessageText}]\r\n            };\r\n        }\r\n        case UPDATE_NEW_MESSAGE_TEXT: {\r\n            return {\r\n                ...state,\r\n                newNameText: action.newText,\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport const addMessageActionCreator = () => ({type: ADD_MESSAGE})\r\nexport const updateNewMessageTextActionCreator = (text) => ({type: UPDATE_NEW_MESSAGE_TEXT, newText: text})\r\n\r\nexport default messageReducer;\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport messageReducer from \"./message-reducer\";\r\n\r\nlet reducers = combineReducers({\r\n    messagePage: messageReducer,\r\n})\r\n\r\nlet store = createStore(reducers);\r\n\r\nexport default store;\r\n","import React from 'react';\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className=\"col-4\">\r\n        <div className=\"card text-white bg-success mb-3\" style={{maxWidth: '18rem'}}>\r\n            <div className=\"card-header\">{props.name}</div>\r\n            <div className=\"card-body\">\r\n                <h5 className=\"card-title\">{props.email}</h5>\r\n                <p className=\"card-text\">{props.message}</p>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Message;\r\n","import React from 'react';\r\nimport {Button} from \"react-bootstrap\";\r\nimport Message from \"./Message\";\r\n\r\n\r\nconst Messages = (props) => {\r\n    let MessageElements = props.messages.messageData.map(el =>\r\n        <Message key={el.id}\r\n                 name={el.name}\r\n                 email={el.email}\r\n                 message={el.message}\r\n        />\r\n\r\n    );\r\n\r\n    let onAddMessage = () => {\r\n        props.addMessage();\r\n    }\r\n\r\n    let onMessageChange = (e) => {\r\n        let text = e.target.value;\r\n    }\r\n    return (\r\n\r\n        <section className=\"hh-form-container\">\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    {MessageElements}\r\n                </div>\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\nexport default Messages;\r\n","import React from 'react';\r\nimport Messages from \"./Messages\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        messages: state.messagePage,\r\n        newFieldsText: state.messagePage.newFieldsText\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n\r\n    }\r\n}\r\nconst MessagesContainer = connect(mapStateToProps, mapDispatchToProps)(Messages);\r\n\r\nexport default MessagesContainer;\r\n","import React from 'react';\r\n\r\n\r\nconst AddForm = (props) => {\r\n\r\n    let onAddMessage = () => {\r\n        props.addMessage();\r\n    }\r\n\r\n    let onMessageChange = (e) => {\r\n        let text = e.target.value;\r\n        props.updateNewMessageText(text);\r\n    }\r\n    return (\r\n        <section>\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-12\">\r\n                        <form className=\"needs-validation\" noValidate>\r\n                            <div className=\"form-row\">\r\n                                <div className=\"col-md-6 mb-3\">\r\n                                    <label htmlFor=\"validationCustom01\">Имя</label>\r\n                                    <input onChange={onMessageChange} value={props.newNameText} type=\"text\" className=\"form-control\" id=\"validationCustom01\" required/>\r\n                                        <div className=\"valid-feedback\">\r\n                                            Выглядит хорошо!\r\n                                        </div>\r\n                                </div>\r\n                                <div className=\"col-md-6 mb-3\">\r\n                                    <label htmlFor=\"validationCustom02\">E-Mail</label>\r\n                                    <input onChange={onMessageChange} value={props.newEmailText} type=\"email\" className=\"form-control\" id=\"validationCustom02\" required/>\r\n                                        <div className=\"valid-feedback\">\r\n                                            Выглядит хорошо!\r\n                                        </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"btn btn-primary\" onClick={onAddMessage}>Записать</div>\r\n                        </form>\r\n\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </section>\r\n\r\n\r\n    );\r\n}\r\nexport default AddForm;\r\n","import {addMessageActionCreator} from \"../../redux/message-reducer\";\r\nimport {updateNewMessageTextActionCreator} from \"../../redux/message-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport AddForm from \"./AddForm\";\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        messages: state.messagePage,\r\n        newNameText: state.messagePage.newNameText,\r\n        newEmailText: state.messagePage.newEmailText,\r\n        newMessageText: state.messagePage.newMessageText,\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addMessage: ()=>{\r\n            dispatch(addMessageActionCreator())\r\n        },\r\n        updateNewMessageText: (text)=>{\r\n            dispatch(updateNewMessageTextActionCreator(text))\r\n        },\r\n    }\r\n}\r\nconst AddFormContainer = connect(mapStateToProps, mapDispatchToProps)(AddForm);\r\n\r\nexport default AddFormContainer;\r\n","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport MessagesContainer from \"./Components/Messages/MessagesContainer\";\r\nimport * as firebase from \"firebase\";\r\nimport AddFormContainer from \"./Components/AddForm/AddFormContainer\";\r\n\r\n\r\nexport default class App extends Component {\r\n    componentDidMount(){\r\n        const db = firebase.database();\r\n        console.log(db);\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"wrapper\">\r\n                <div className=\"content-wrapper\">\r\n                    <AddFormContainer/>\r\n                    <MessagesContainer/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as serviceWorker from './serviceWorker';\r\nimport store from \"./redux/redux-store\"\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport * as firebase from 'firebase'\r\n/*import {initializeApp} from \"firebase\";*/\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDOncgrRVKkdECjGJd8xJ3xcz7EdnabeHk\",\r\n    authDomain: \"incident-itk.firebaseapp.com\",\r\n    databaseURL: \"https://incident-itk.firebaseio.com\",\r\n    projectId: \"incident-itk\",\r\n    storageBucket: \"incident-itk.appspot.com\",\r\n    messagingSenderId: \"652187485400\",\r\n    appId: \"1:652187485400:web:6b055eed1f22c74e1083ad\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </BrowserRouter>, document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}